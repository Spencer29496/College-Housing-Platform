version: '3.8'

services:

  scraper:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: college_housing_scraper
    working_dir: /app
    command: python scraper.py
    volumes:
      - ./src:/app
    depends_on:
      database:
        condition: service_healthy
    networks:
      - college_housing_network
    restart: on-failure

  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: college_housing_web
    ports:
      - "8000:5000"
    volumes:
      - ./src:/app
    command: >
      sh -c "python init_db.py &&
             python seed_db.py &&
             python server.py"
    restart: always
    depends_on:
      database:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=database
      - POSTGRES_DB=housing_db
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-college_housing_pass}
    networks:
      - college_housing_network

  redis:
    image: "redis:alpine"
    container_name: college_housing_redis
    restart: unless-stopped
    networks:
      - college_housing_network
    volumes:
      - redis_data:/data

  database:
    container_name: college_housing_postgres
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-college_housing_pass}
      POSTGRES_DB: housing_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - college_housing_network

  adminer:
    container_name: college_housing_adminer
    image: adminer
    restart: always
    depends_on:
      - database
    ports:
      - "8080:8080"
    networks:
      - college_housing_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  college_housing_network:
    driver: bridge